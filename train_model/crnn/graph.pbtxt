node {
  name: "data/wav_filename"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/ReadFile"
  op: "ReadFile"
  input: "data/wav_filename"
}
node {
  name: "data/DecodeWav"
  op: "DecodeWav"
  input: "data/ReadFile"
  attr {
    key: "desired_channels"
    value {
      i: 1
    }
  }
  attr {
    key: "desired_samples"
    value {
      i: 16000
    }
  }
}
node {
  name: "data/foreground_volume"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200>\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "data/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/ExpandDims"
  op: "ExpandDims"
  input: "data/DecodeWav"
  input: "data/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/ExpandDims_1"
  op: "ExpandDims"
  input: "data/ExpandDims"
  input: "data/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/strided_slice"
  op: "StridedSlice"
  input: "data/Shape"
  input: "data/strided_slice/stack"
  input: "data/strided_slice/stack_1"
  input: "data/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "data/Cast"
  op: "Cast"
  input: "data/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "data/mul"
  op: "Mul"
  input: "data/Cast"
  input: "data/Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Cast_1"
  op: "Cast"
  input: "data/mul"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize/size/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize/size"
  op: "Pack"
  input: "data/Cast_1"
  input: "data/resize/size/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "data/ExpandDims_1"
  input: "data/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Shape"
  op: "Shape"
  input: "data/resize/ResizeBilinear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/Shape"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Rank"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/Rank"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/control_dependency"
  op: "Identity"
  input: "data/resize/ResizeBilinear"
  input: "^data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize/ResizeBilinear"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/sub"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/sub/x"
  input: "data/resize_image_with_crop_or_pad/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Neg"
  op: "Neg"
  input: "data/resize_image_with_crop_or_pad/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv"
  op: "FloorDiv"
  input: "data/resize_image_with_crop_or_pad/Neg"
  input: "data/resize_image_with_crop_or_pad/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum"
  op: "Maximum"
  input: "data/resize_image_with_crop_or_pad/floordiv"
  input: "data/resize_image_with_crop_or_pad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv_1"
  op: "FloorDiv"
  input: "data/resize_image_with_crop_or_pad/sub"
  input: "data/resize_image_with_crop_or_pad/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum_1"
  op: "Maximum"
  input: "data/resize_image_with_crop_or_pad/floordiv_1"
  input: "data/resize_image_with_crop_or_pad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Minimum"
  op: "Minimum"
  input: "data/resize_image_with_crop_or_pad/Minimum/x"
  input: "data/resize_image_with_crop_or_pad/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/add"
  op: "AddV2"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/unstack:1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize/ResizeBilinear"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/0"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/0"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub/x"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/0"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/1"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/4"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/5"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/6"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/control_dependency"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/control_dependency_1"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "data/Squeeze"
  op: "Squeeze"
  input: "data/resize_image_with_crop_or_pad/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 3
      }
    }
  }
}
node {
  name: "data/Mul_1"
  op: "Mul"
  input: "data/Squeeze"
  input: "data/foreground_volume"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/time_shift_padding"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "data/time_shift_offset"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "data/Pad"
  op: "Pad"
  input: "data/Mul_1"
  input: "data/time_shift_padding"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200>\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "data/Slice"
  op: "Slice"
  input: "data/Pad"
  input: "data/time_shift_offset"
  input: "data/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/background_data"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16000
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "data/background_volume"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/Mul_2"
  op: "Mul"
  input: "data/background_data"
  input: "data/background_volume"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Add"
  op: "Add"
  input: "data/Mul_2"
  input: "data/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "data/clip_by_value/Minimum"
  op: "Minimum"
  input: "data/Add"
  input: "data/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "data/clip_by_value"
  op: "Maximum"
  input: "data/clip_by_value/Minimum"
  input: "data/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Mul_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32768.0
      }
    }
  }
}
node {
  name: "data/Mul_3"
  op: "Mul"
  input: "data/clip_by_value"
  input: "data/Mul_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Cast_2"
  op: "Cast"
  input: "data/Mul_3"
  attr {
    key: "DstT"
    value {
      type: DT_INT16
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "data/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "data/Reshape"
  op: "Reshape"
  input: "data/Cast_2"
  input: "data/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT16
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/AudioMicrofrontend"
  op: "AudioMicrofrontend"
  input: "data/Reshape"
  attr {
    key: "enable_log"
    value {
      b: true
    }
  }
  attr {
    key: "enable_pcan"
    value {
      b: true
    }
  }
  attr {
    key: "even_smoothing"
    value {
      f: 0.02500000037252903
    }
  }
  attr {
    key: "frame_stride"
    value {
      i: 1
    }
  }
  attr {
    key: "gain_bits"
    value {
      i: 21
    }
  }
  attr {
    key: "left_context"
    value {
      i: 0
    }
  }
  attr {
    key: "lower_band_limit"
    value {
      f: 20.0
    }
  }
  attr {
    key: "min_signal_remaining"
    value {
      f: 0.05000000074505806
    }
  }
  attr {
    key: "num_channels"
    value {
      i: 40
    }
  }
  attr {
    key: "odd_smoothing"
    value {
      f: 0.05999999865889549
    }
  }
  attr {
    key: "out_scale"
    value {
      i: 1
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "pcan_offset"
    value {
      f: 80.0
    }
  }
  attr {
    key: "pcan_strength"
    value {
      f: 0.949999988079071
    }
  }
  attr {
    key: "right_context"
    value {
      i: 0
    }
  }
  attr {
    key: "sample_rate"
    value {
      i: 16000
    }
  }
  attr {
    key: "scale_shift"
    value {
      i: 6
    }
  }
  attr {
    key: "smoothing_bits"
    value {
      i: 10
    }
  }
  attr {
    key: "upper_band_limit"
    value {
      f: 7000.0
    }
  }
  attr {
    key: "window_size"
    value {
      i: 40
    }
  }
  attr {
    key: "window_step"
    value {
      i: 20
    }
  }
  attr {
    key: "zero_padding"
    value {
      b: false
    }
  }
}
node {
  name: "data/Mul_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0390625
      }
    }
  }
}
node {
  name: "data/Mul_4"
  op: "Mul"
  input: "data/AudioMicrofrontend"
  input: "data/Mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "input_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 49
        }
        dim {
          size: 40
        }
      }
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "input_1"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^ExpandDims/dim"
}
node {
  name: "stream/conv2d/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "stream/conv2d/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1980295032262802
      }
    }
  }
}
node {
  name: "stream/conv2d/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1980295032262802
      }
    }
  }
}
node {
  name: "stream/conv2d/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "stream/conv2d/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "stream/conv2d/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "stream/conv2d/kernel/Initializer/random_uniform/max"
  input: "stream/conv2d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/conv2d/kernel"
      }
    }
  }
}
node {
  name: "stream/conv2d/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "stream/conv2d/kernel/Initializer/random_uniform/RandomUniform"
  input: "stream/conv2d/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/conv2d/kernel"
      }
    }
  }
}
node {
  name: "stream/conv2d/kernel/Initializer/random_uniform"
  op: "Add"
  input: "stream/conv2d/kernel/Initializer/random_uniform/mul"
  input: "stream/conv2d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/conv2d/kernel"
      }
    }
  }
}
node {
  name: "stream/conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/conv2d/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream/conv2d/kernel"
    }
  }
}
node {
  name: "stream/conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream/conv2d/kernel"
}
node {
  name: "stream/conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "stream/conv2d/kernel"
  input: "stream/conv2d/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream/conv2d/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "stream/conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream/conv2d/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream/conv2d/bias"
    }
  }
}
node {
  name: "stream/conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream/conv2d/bias"
}
node {
  name: "stream/conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "stream/conv2d/bias"
  input: "stream/conv2d/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream/conv2d/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream/conv2d/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/conv2d/Conv2D"
  op: "Conv2D"
  input: "ExpandDims"
  input: "stream/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "stream/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream/conv2d/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "stream/conv2d/Conv2D"
  input: "stream/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "stream/conv2d/Relu"
  op: "Relu"
  input: "stream/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/conv2d_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\003\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "stream_1/conv2d_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11180339753627777
      }
    }
  }
}
node {
  name: "stream_1/conv2d_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11180339753627777
      }
    }
  }
}
node {
  name: "stream_1/conv2d_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "stream_1/conv2d_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "stream_1/conv2d_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "stream_1/conv2d_1/kernel/Initializer/random_uniform/max"
  input: "stream_1/conv2d_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "stream_1/conv2d_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "stream_1/conv2d_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "stream_1/conv2d_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "stream_1/conv2d_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "stream_1/conv2d_1/kernel/Initializer/random_uniform/mul"
  input: "stream_1/conv2d_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "stream_1/conv2d_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_1/conv2d_1/kernel"
    }
  }
}
node {
  name: "stream_1/conv2d_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_1/conv2d_1/kernel"
}
node {
  name: "stream_1/conv2d_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "stream_1/conv2d_1/kernel"
  input: "stream_1/conv2d_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/conv2d_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_1/conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/conv2d_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/conv2d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "stream_1/conv2d_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@stream_1/conv2d_1/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "stream_1/conv2d_1/bias"
    }
  }
}
node {
  name: "stream_1/conv2d_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "stream_1/conv2d_1/bias"
}
node {
  name: "stream_1/conv2d_1/bias/Assign"
  op: "AssignVariableOp"
  input: "stream_1/conv2d_1/bias"
  input: "stream_1/conv2d_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/conv2d_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_1/conv2d_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/conv2d_1/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_1/conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "stream/conv2d/Relu"
  input: "stream_1/conv2d_1/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "stream_1/conv2d_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "stream_1/conv2d_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "stream_1/conv2d_1/BiasAdd"
  op: "BiasAdd"
  input: "stream_1/conv2d_1/Conv2D"
  input: "stream_1/conv2d_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "stream_1/conv2d_1/Relu"
  op: "Relu"
  input: "stream_1/conv2d_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reshape/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000+\000\000\000$\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reshape/strided_slice"
  op: "StridedSlice"
  input: "reshape/Shape"
  input: "reshape/strided_slice/stack"
  input: "reshape/strided_slice/stack_1"
  input: "reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 576
      }
    }
  }
}
node {
  name: "reshape/Reshape/shape"
  op: "Pack"
  input: "reshape/strided_slice"
  input: "reshape/Reshape/shape/1"
  input: "reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reshape/Reshape"
  op: "Reshape"
  input: "stream_1/conv2d_1/Relu"
  input: "reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/gru_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\002\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06681530922651291
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06681530922651291
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "gru/cell/gru_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "gru/cell/gru_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "gru/cell/gru_cell/kernel/Initializer/random_uniform/max"
  input: "gru/cell/gru_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/kernel"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "gru/cell/gru_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "gru/cell/gru_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/kernel"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "gru/cell/gru_cell/kernel/Initializer/random_uniform/mul"
  input: "gru/cell/gru_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/kernel"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
        dim {
          size: 768
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "gru/cell/gru_cell/kernel"
    }
  }
}
node {
  name: "gru/cell/gru_cell/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "gru/cell/gru_cell/kernel"
}
node {
  name: "gru/cell/gru_cell/kernel/Assign"
  op: "AssignVariableOp"
  input: "gru/cell/gru_cell/kernel"
  input: "gru/cell/gru_cell/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru/cell/gru_cell/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal/RandomStandardNormal"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal"
  op: "Add"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal/mul"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/Qr"
  op: "Qr"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "full_matrices"
    value {
      b: false
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/DiagPart"
  op: "DiagPart"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/Qr:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/Sign"
  op: "Sign"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/DiagPart"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/mul"
  op: "Mul"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/Qr"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/matrix_transpose/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/matrix_transpose/transpose"
  op: "Transpose"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/mul"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/matrix_transpose/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/Reshape"
  op: "Reshape"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/matrix_transpose/transpose"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/mul_1/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Initializer/mul_1"
  op: "Mul"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/mul_1/x"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/recurrent_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 768
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "gru/cell/gru_cell/recurrent_kernel"
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "gru/cell/gru_cell/recurrent_kernel"
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Assign"
  op: "AssignVariableOp"
  input: "gru/cell/gru_cell/recurrent_kernel"
  input: "gru/cell/gru_cell/recurrent_kernel/Initializer/mul_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell/recurrent_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru/cell/gru_cell/recurrent_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "gru/cell/gru_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "gru/cell/gru_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/gru_cell/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/gru_cell/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 768
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "gru/cell/gru_cell/bias"
    }
  }
}
node {
  name: "gru/cell/gru_cell/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "gru/cell/gru_cell/bias"
}
node {
  name: "gru/cell/gru_cell/bias/Assign"
  op: "AssignVariableOp"
  input: "gru/cell/gru_cell/bias"
  input: "gru/cell/gru_cell/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru/cell/gru_cell/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gru/cell/zeros"
  op: "Fill"
  input: "gru/cell/zeros/shape_as_tensor"
  input: "gru/cell/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/Variable"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gru/cell/Variable"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "gru/cell/Variable"
    }
  }
}
node {
  name: "gru/cell/Variable/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "gru/cell/Variable"
}
node {
  name: "gru/cell/Variable/Assign"
  op: "AssignVariableOp"
  input: "gru/cell/Variable"
  input: "gru/cell/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/Variable/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru/cell/Variable"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/transpose"
  op: "Transpose"
  input: "reshape/Reshape"
  input: "gru/cell/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "+\000\000\000d\000\000\000@\002\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gru/cell/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gru/cell/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gru/cell/strided_slice"
  op: "StridedSlice"
  input: "gru/cell/Shape"
  input: "gru/cell/strided_slice/stack"
  input: "gru/cell/strided_slice/stack_1"
  input: "gru/cell/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gru/cell/TensorArrayV2/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/TensorArrayV2"
  op: "TensorListReserve"
  input: "gru/cell/TensorArrayV2/element_shape"
  input: "gru/cell/strided_slice"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/TensorArrayUnstack/TensorListFromTensor/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000@\002\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/TensorArrayUnstack/TensorListFromTensor"
  op: "TensorListFromTensor"
  input: "gru/cell/transpose"
  input: "gru/cell/TensorArrayUnstack/TensorListFromTensor/element_shape"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gru/cell/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gru/cell/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gru/cell/strided_slice_1"
  op: "StridedSlice"
  input: "gru/cell/transpose"
  input: "gru/cell/strided_slice_1/stack"
  input: "gru/cell/strided_slice_1/stack_1"
  input: "gru/cell/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru/cell/gru_cell/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/unstack"
  op: "Unpack"
  input: "gru/cell/gru_cell_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru/cell/gru_cell/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/MatMul"
  op: "MatMul"
  input: "gru/cell/strided_slice_1"
  input: "gru/cell/gru_cell_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/BiasAdd"
  op: "BiasAdd"
  input: "gru/cell/gru_cell_1/MatMul"
  input: "gru/cell/gru_cell_1/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/split/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/split"
  op: "Split"
  input: "gru/cell/gru_cell_1/split/split_dim"
  input: "gru/cell/gru_cell_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 3
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/MatMul_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru/cell/Variable"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/MatMul_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "gru/cell/gru_cell/recurrent_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/MatMul_1"
  op: "MatMul"
  input: "gru/cell/gru_cell_1/MatMul_1/ReadVariableOp"
  input: "gru/cell/gru_cell_1/MatMul_1/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/BiasAdd_1"
  op: "BiasAdd"
  input: "gru/cell/gru_cell_1/MatMul_1"
  input: "gru/cell/gru_cell_1/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/split_1/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/split_1"
  op: "SplitV"
  input: "gru/cell/gru_cell_1/BiasAdd_1"
  input: "gru/cell/gru_cell_1/Const_1"
  input: "gru/cell/gru_cell_1/split_1/split_dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "num_split"
    value {
      i: 3
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/add"
  op: "AddV2"
  input: "gru/cell/gru_cell_1/split"
  input: "gru/cell/gru_cell_1/split_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/Sigmoid"
  op: "Sigmoid"
  input: "gru/cell/gru_cell_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/add_1"
  op: "AddV2"
  input: "gru/cell/gru_cell_1/split:1"
  input: "gru/cell/gru_cell_1/split_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/Sigmoid_1"
  op: "Sigmoid"
  input: "gru/cell/gru_cell_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/mul"
  op: "Mul"
  input: "gru/cell/gru_cell_1/Sigmoid_1"
  input: "gru/cell/gru_cell_1/split_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/add_2"
  op: "AddV2"
  input: "gru/cell/gru_cell_1/split:2"
  input: "gru/cell/gru_cell_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/Tanh"
  op: "Tanh"
  input: "gru/cell/gru_cell_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/mul_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru/cell/Variable"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/mul_1"
  op: "Mul"
  input: "gru/cell/gru_cell_1/Sigmoid"
  input: "gru/cell/gru_cell_1/mul_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/sub"
  op: "Sub"
  input: "gru/cell/gru_cell_1/sub/x"
  input: "gru/cell/gru_cell_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/mul_2"
  op: "Mul"
  input: "gru/cell/gru_cell_1/sub"
  input: "gru/cell/gru_cell_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/gru_cell_1/add_3"
  op: "AddV2"
  input: "gru/cell/gru_cell_1/mul_1"
  input: "gru/cell/gru_cell_1/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/TensorArrayV2_1/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/TensorArrayV2_1"
  op: "TensorListReserve"
  input: "gru/cell/TensorArrayV2_1/element_shape"
  input: "gru/cell/strided_slice"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gru/cell/ReadVariableOp"
  op: "ReadVariableOp"
  input: "gru/cell/Variable"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/loop_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gru/cell/while/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const"
  input: "gru/cell/while/EmptyTensorList/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_1/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_1"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const_1"
  input: "gru/cell/while/EmptyTensorList_1/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_2/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_2"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const_2"
  input: "gru/cell/while/EmptyTensorList_2/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_3/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_3/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_3"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_3/element_shape"
  input: "gru/cell/while/EmptyTensorList_3/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_4/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_4/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_4"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_4/element_shape"
  input: "gru/cell/while/EmptyTensorList_4/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_5/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000@\002\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_5/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_5"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_5/element_shape"
  input: "gru/cell/while/EmptyTensorList_5/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_6/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_6/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_6"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_6/element_shape"
  input: "gru/cell/while/EmptyTensorList_6/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_7/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 768
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_7/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_7"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_7/element_shape"
  input: "gru/cell/while/EmptyTensorList_7/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_8/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 768
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_8/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_8"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_8/element_shape"
  input: "gru/cell/while/EmptyTensorList_8/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_9/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\002\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_9/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_9"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_9/element_shape"
  input: "gru/cell/while/EmptyTensorList_9/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_10/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_10/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_10"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_10/element_shape"
  input: "gru/cell/while/EmptyTensorList_10/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_11/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_11/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_11"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_11/element_shape"
  input: "gru/cell/while/EmptyTensorList_11/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_12/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_12"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const_3"
  input: "gru/cell/while/EmptyTensorList_12/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_13/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_13"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const_4"
  input: "gru/cell/while/EmptyTensorList_13/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_14/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_14/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_14"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_14/element_shape"
  input: "gru/cell/while/EmptyTensorList_14/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_15/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_15/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_15"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_15/element_shape"
  input: "gru/cell/while/EmptyTensorList_15/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_16/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_16/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_16"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_16/element_shape"
  input: "gru/cell/while/EmptyTensorList_16/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_17/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_17/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_17"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_17/element_shape"
  input: "gru/cell/while/EmptyTensorList_17/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_18/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_18/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_18"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_18/element_shape"
  input: "gru/cell/while/EmptyTensorList_18/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_19/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_19/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_19"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_19/element_shape"
  input: "gru/cell/while/EmptyTensorList_19/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_20/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_20/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_20"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_20/element_shape"
  input: "gru/cell/while/EmptyTensorList_20/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_21/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_21"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const_5"
  input: "gru/cell/while/EmptyTensorList_21/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_22/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_22/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_22"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_22/element_shape"
  input: "gru/cell/while/EmptyTensorList_22/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_23/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_23/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_23"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_23/element_shape"
  input: "gru/cell/while/EmptyTensorList_23/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_24/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_24/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_24"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_24/element_shape"
  input: "gru/cell/while/EmptyTensorList_24/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_25/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_25/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_25"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_25/element_shape"
  input: "gru/cell/while/EmptyTensorList_25/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_26/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_26/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_26"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_26/element_shape"
  input: "gru/cell/while/EmptyTensorList_26/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_27/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_27/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_27"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_27/element_shape"
  input: "gru/cell/while/EmptyTensorList_27/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_28/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_28/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_28"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_28/element_shape"
  input: "gru/cell/while/EmptyTensorList_28/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_29/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_29/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_29"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_29/element_shape"
  input: "gru/cell/while/EmptyTensorList_29/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_30/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_30/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_30"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_30/element_shape"
  input: "gru/cell/while/EmptyTensorList_30/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_31/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_31/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_31"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_31/element_shape"
  input: "gru/cell/while/EmptyTensorList_31/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_32/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_32/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_32"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_32/element_shape"
  input: "gru/cell/while/EmptyTensorList_32/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_33/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_33"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const_6"
  input: "gru/cell/while/EmptyTensorList_33/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_34/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_34/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_34"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_34/element_shape"
  input: "gru/cell/while/EmptyTensorList_34/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_35/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_35/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_35"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_35/element_shape"
  input: "gru/cell/while/EmptyTensorList_35/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_36/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_36/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_36"
  op: "EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_36/element_shape"
  input: "gru/cell/while/EmptyTensorList_36/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_37/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_37"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const_7"
  input: "gru/cell/while/EmptyTensorList_37/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_38/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_38"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const_8"
  input: "gru/cell/while/EmptyTensorList_38/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_39/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_39"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const_9"
  input: "gru/cell/while/EmptyTensorList_39/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_40/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_40"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const_10"
  input: "gru/cell/while/EmptyTensorList_40/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_41/max_num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/while/EmptyTensorList_41"
  op: "EmptyTensorList"
  input: "gru/cell/while/Const_11"
  input: "gru/cell/while/EmptyTensorList_41/max_num_elements"
  attr {
    key: "element_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while"
  op: "While"
  input: "gru/cell/while/loop_counter"
  input: "gru/cell/while/maximum_iterations"
  input: "gru/cell/time"
  input: "gru/cell/TensorArrayV2_1"
  input: "gru/cell/ReadVariableOp"
  input: "gru/cell/strided_slice"
  input: "gru/cell/TensorArrayUnstack/TensorListFromTensor"
  input: "gru/cell/gru_cell/bias"
  input: "gru/cell/gru_cell/kernel"
  input: "gru/cell/gru_cell/recurrent_kernel"
  input: "gru/cell/while/EmptyTensorList"
  input: "gru/cell/while/EmptyTensorList_1"
  input: "gru/cell/while/EmptyTensorList_2"
  input: "gru/cell/while/EmptyTensorList_3"
  input: "gru/cell/while/EmptyTensorList_4"
  input: "gru/cell/while/EmptyTensorList_5"
  input: "gru/cell/while/EmptyTensorList_6"
  input: "gru/cell/while/EmptyTensorList_7"
  input: "gru/cell/while/EmptyTensorList_8"
  input: "gru/cell/while/EmptyTensorList_9"
  input: "gru/cell/while/EmptyTensorList_10"
  input: "gru/cell/while/EmptyTensorList_11"
  input: "gru/cell/while/EmptyTensorList_12"
  input: "gru/cell/while/EmptyTensorList_13"
  input: "gru/cell/while/EmptyTensorList_14"
  input: "gru/cell/while/EmptyTensorList_15"
  input: "gru/cell/while/EmptyTensorList_16"
  input: "gru/cell/while/EmptyTensorList_17"
  input: "gru/cell/while/EmptyTensorList_18"
  input: "gru/cell/while/EmptyTensorList_19"
  input: "gru/cell/while/EmptyTensorList_20"
  input: "gru/cell/while/EmptyTensorList_21"
  input: "gru/cell/while/EmptyTensorList_22"
  input: "gru/cell/while/EmptyTensorList_23"
  input: "gru/cell/while/EmptyTensorList_24"
  input: "gru/cell/while/EmptyTensorList_25"
  input: "gru/cell/while/EmptyTensorList_26"
  input: "gru/cell/while/EmptyTensorList_27"
  input: "gru/cell/while/EmptyTensorList_28"
  input: "gru/cell/while/EmptyTensorList_29"
  input: "gru/cell/while/EmptyTensorList_30"
  input: "gru/cell/while/EmptyTensorList_31"
  input: "gru/cell/while/EmptyTensorList_32"
  input: "gru/cell/while/EmptyTensorList_33"
  input: "gru/cell/while/EmptyTensorList_34"
  input: "gru/cell/while/EmptyTensorList_35"
  input: "gru/cell/while/EmptyTensorList_36"
  input: "gru/cell/while/EmptyTensorList_37"
  input: "gru/cell/while/EmptyTensorList_38"
  input: "gru/cell/while/EmptyTensorList_39"
  input: "gru/cell/while/EmptyTensorList_40"
  input: "gru/cell/while/EmptyTensorList_41"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_VARIANT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_VARIANT
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_num_original_outputs"
    value {
      i: 10
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 7
        i: 8
        i: 9
      }
    }
  }
  attr {
    key: "body"
    value {
      func {
        name: "gru_cell_while_body_341"
      }
    }
  }
  attr {
    key: "cond"
    value {
      func {
        name: "gru_cell_while_cond_340"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 100
          }
          dim {
            size: 256
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gru/cell/while/Identity"
  op: "Identity"
  input: "gru/cell/while"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Identity_1"
  op: "Identity"
  input: "gru/cell/while:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Identity_2"
  op: "Identity"
  input: "gru/cell/while:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Identity_3"
  op: "Identity"
  input: "gru/cell/while:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_4"
  op: "Identity"
  input: "gru/cell/while:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/while/Identity_5"
  op: "Identity"
  input: "gru/cell/while:5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/while/Identity_6"
  op: "Identity"
  input: "gru/cell/while:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_7"
  op: "Identity"
  input: "gru/cell/while:7"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
}
node {
  name: "gru/cell/while/Identity_8"
  op: "Identity"
  input: "gru/cell/while:8"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
}
node {
  name: "gru/cell/while/Identity_9"
  op: "Identity"
  input: "gru/cell/while:9"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
}
node {
  name: "gru/cell/while/Identity_10"
  op: "Identity"
  input: "gru/cell/while:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_11"
  op: "Identity"
  input: "gru/cell/while:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_12"
  op: "Identity"
  input: "gru/cell/while:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_13"
  op: "Identity"
  input: "gru/cell/while:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_14"
  op: "Identity"
  input: "gru/cell/while:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_15"
  op: "Identity"
  input: "gru/cell/while:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_16"
  op: "Identity"
  input: "gru/cell/while:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_17"
  op: "Identity"
  input: "gru/cell/while:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_18"
  op: "Identity"
  input: "gru/cell/while:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_19"
  op: "Identity"
  input: "gru/cell/while:19"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_20"
  op: "Identity"
  input: "gru/cell/while:20"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_21"
  op: "Identity"
  input: "gru/cell/while:21"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_22"
  op: "Identity"
  input: "gru/cell/while:22"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_23"
  op: "Identity"
  input: "gru/cell/while:23"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_24"
  op: "Identity"
  input: "gru/cell/while:24"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_25"
  op: "Identity"
  input: "gru/cell/while:25"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_26"
  op: "Identity"
  input: "gru/cell/while:26"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_27"
  op: "Identity"
  input: "gru/cell/while:27"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_28"
  op: "Identity"
  input: "gru/cell/while:28"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_29"
  op: "Identity"
  input: "gru/cell/while:29"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_30"
  op: "Identity"
  input: "gru/cell/while:30"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_31"
  op: "Identity"
  input: "gru/cell/while:31"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_32"
  op: "Identity"
  input: "gru/cell/while:32"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_33"
  op: "Identity"
  input: "gru/cell/while:33"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_34"
  op: "Identity"
  input: "gru/cell/while:34"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_35"
  op: "Identity"
  input: "gru/cell/while:35"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_36"
  op: "Identity"
  input: "gru/cell/while:36"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_37"
  op: "Identity"
  input: "gru/cell/while:37"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_38"
  op: "Identity"
  input: "gru/cell/while:38"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_39"
  op: "Identity"
  input: "gru/cell/while:39"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_40"
  op: "Identity"
  input: "gru/cell/while:40"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_41"
  op: "Identity"
  input: "gru/cell/while:41"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_42"
  op: "Identity"
  input: "gru/cell/while:42"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_43"
  op: "Identity"
  input: "gru/cell/while:43"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_44"
  op: "Identity"
  input: "gru/cell/while:44"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_45"
  op: "Identity"
  input: "gru/cell/while:45"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_46"
  op: "Identity"
  input: "gru/cell/while:46"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_47"
  op: "Identity"
  input: "gru/cell/while:47"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_48"
  op: "Identity"
  input: "gru/cell/while:48"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_49"
  op: "Identity"
  input: "gru/cell/while:49"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_50"
  op: "Identity"
  input: "gru/cell/while:50"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/while/Identity_51"
  op: "Identity"
  input: "gru/cell/while:51"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "gru/cell/TensorArrayV2Stack/TensorListStack/element_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/TensorArrayV2Stack/TensorListStack"
  op: "TensorListStack"
  input: "gru/cell/while/Identity_3"
  input: "gru/cell/TensorArrayV2Stack/TensorListStack/element_shape"
  attr {
    key: "element_dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_elements"
    value {
      i: -1
    }
  }
}
node {
  name: "gru/cell/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gru/cell/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gru/cell/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gru/cell/strided_slice_2"
  op: "StridedSlice"
  input: "gru/cell/TensorArrayV2Stack/TensorListStack"
  input: "gru/cell/strided_slice_2/stack"
  input: "gru/cell/strided_slice_2/stack_1"
  input: "gru/cell/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gru/cell/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "gru/cell/transpose_1"
  op: "Transpose"
  input: "gru/cell/TensorArrayV2Stack/TensorListStack"
  input: "gru/cell/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gru/cell/runtime"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gru/cell/AssignVariableOp"
  op: "AssignVariableOp"
  input: "gru/cell/Variable"
  input: "gru/cell/while/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/cell/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "gru/cell/Variable"
  input: "^gru/cell/AssignVariableOp"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gru/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gru/ExpandDims"
  op: "ExpandDims"
  input: "gru/cell/strided_slice_2"
  input: "gru/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "stream_2/flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\000\001\000\000"
      }
    }
  }
}
node {
  name: "stream_2/flatten/Reshape"
  op: "Reshape"
  input: "gru/ExpandDims"
  input: "stream_2/flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "dropout/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "stream_2/flatten/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dropout_cond_false_778"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 256
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dropout_cond_true_777"
      }
    }
  }
}
node {
  name: "dropout/cond/Identity"
  op: "Identity"
  input: "dropout/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/cond/Identity_1"
  op: "Identity"
  input: "dropout/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_2"
  op: "Identity"
  input: "dropout/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_3"
  op: "Identity"
  input: "dropout/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_4"
  op: "Identity"
  input: "dropout/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_5"
  op: "Identity"
  input: "dropout/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_6"
  op: "Identity"
  input: "dropout/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dropout/cond/Identity_7"
  op: "Identity"
  input: "dropout/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense/kernel/Initializer/random_uniform/max"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense/kernel/Initializer/random_uniform/mul"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/kernel"
    }
  }
}
node {
  name: "dense/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
}
node {
  name: "dense/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense/kernel"
  input: "dense/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/bias"
    }
  }
}
node {
  name: "dense/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/bias"
}
node {
  name: "dense/bias/Assign"
  op: "AssignVariableOp"
  input: "dense/bias"
  input: "dense/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "dropout/cond/Identity"
  input: "dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_1/kernel/Initializer/random_uniform/max"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_1/kernel/Initializer/random_uniform/mul"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_1/kernel"
    }
  }
}
node {
  name: "dense_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
}
node {
  name: "dense_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_1/kernel"
  input: "dense_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_1/bias"
    }
  }
}
node {
  name: "dense_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
}
node {
  name: "dense_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_1/bias"
  input: "dense_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dense/BiasAdd"
  input: "dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Relu"
  op: "Relu"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.14907120168209076
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.14907120168209076
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_2/kernel/Initializer/random_uniform/max"
  input: "dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_2/kernel/Initializer/random_uniform/mul"
  input: "dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 14
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_2/kernel"
    }
  }
}
node {
  name: "dense_2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_2/kernel"
}
node {
  name: "dense_2/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_2/kernel"
  input: "dense_2/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 14
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_2/bias"
    }
  }
}
node {
  name: "dense_2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_2/bias"
}
node {
  name: "dense_2/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_2/bias"
  input: "dense_2/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dense_1/Relu"
  input: "dense_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total"
    }
  }
}
node {
  name: "total/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total"
}
node {
  name: "total/Assign"
  op: "AssignVariableOp"
  input: "total"
  input: "total/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count"
    }
  }
}
node {
  name: "count/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count"
}
node {
  name: "count/Assign"
  op: "AssignVariableOp"
  input: "count"
  input: "count/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Squeeze"
  op: "Squeeze"
  input: "dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "metrics/accuracy/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/accuracy/ArgMax"
  op: "ArgMax"
  input: "dense_2/BiasAdd"
  input: "metrics/accuracy/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/accuracy/Cast"
  op: "Cast"
  input: "metrics/accuracy/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/Equal"
  op: "Equal"
  input: "metrics/accuracy/Squeeze"
  input: "metrics/accuracy/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "metrics/accuracy/Cast_1"
  op: "Cast"
  input: "metrics/accuracy/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/accuracy/Sum"
  op: "Sum"
  input: "metrics/accuracy/Cast_1"
  input: "metrics/accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "total"
  input: "metrics/accuracy/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  input: "^metrics/accuracy/AssignAddVariableOp"
  input: "^metrics/accuracy/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "metrics/accuracy/Cast_2"
  op: "Cast"
  input: "metrics/accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/AssignAddVariableOp_1"
  op: "AssignAddVariableOp"
  input: "count"
  input: "metrics/accuracy/Cast_2"
  input: "^metrics/accuracy/AssignAddVariableOp"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count"
  input: "^metrics/accuracy/AssignAddVariableOp"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan"
  op: "DivNoNan"
  input: "metrics/accuracy/div_no_nan/ReadVariableOp"
  input: "metrics/accuracy/div_no_nan/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Identity"
  op: "Identity"
  input: "metrics/accuracy/div_no_nan"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Cast"
  op: "Cast"
  input: "dense_2_target"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Reshape"
  op: "Reshape"
  input: "loss/dense_2_loss/Cast"
  input: "loss/dense_2_loss/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/dense_2_loss/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/strided_slice"
  op: "StridedSlice"
  input: "loss/dense_2_loss/Shape"
  input: "loss/dense_2_loss/strided_slice/stack"
  input: "loss/dense_2_loss/strided_slice/stack_1"
  input: "loss/dense_2_loss/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss/dense_2_loss/Reshape_1/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Reshape_1/shape"
  op: "Pack"
  input: "loss/dense_2_loss/Reshape_1/shape/0"
  input: "loss/dense_2_loss/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/dense_2_loss/Reshape_1"
  op: "Reshape"
  input: "dense_2/BiasAdd"
  input: "loss/dense_2_loss/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/dense_2_loss/SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Reshape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/dense_2_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/dense_2_loss/Reshape_1"
  input: "loss/dense_2_loss/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss/dense_2_loss/weighted_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/weighted_loss/Mul"
  op: "Mul"
  input: "loss/dense_2_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/dense_2_loss/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum"
  op: "Sum"
  input: "loss/dense_2_loss/weighted_loss/Mul"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/num_elements/Cast"
  op: "Cast"
  input: "loss/dense_2_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/dense_2_loss/Sum"
  input: "loss/dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/value"
  op: "DivNoNan"
  input: "loss/dense_2_loss/Sum_1"
  input: "loss/dense_2_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_2_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dense/bias/Assign"
  input: "^dense/kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_2/bias/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^gru/cell/Variable/Assign"
  input: "^gru/cell/gru_cell/bias/Assign"
  input: "^gru/cell/gru_cell/kernel/Assign"
  input: "^gru/cell/gru_cell/recurrent_kernel/Assign"
  input: "^stream/conv2d/bias/Assign"
  input: "^stream/conv2d/kernel/Assign"
  input: "^stream_1/conv2d_1/bias/Assign"
  input: "^stream_1/conv2d_1/kernel/Assign"
}
library {
  function {
    signature {
      name: "gru_cell_while_cond_340"
      input_arg {
        name: "gru_cell_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "gru_cell_while_maximum_iterations"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "less_gru_cell_strided_slice"
        type: DT_INT32
      }
      input_arg {
        name: "gru_cell_while_cond_340___redundant_placeholder0"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_cond_340___redundant_placeholder1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_while_cond_340___redundant_placeholder2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_while_cond_340___redundant_placeholder3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_2"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_3"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_4"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_5"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_6"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_7"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_8"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_9"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_10"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_11"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_12"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_13"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_14"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_15"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_16"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_17"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_18"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_19"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_20"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_21"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_22"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_23"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_24"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_25"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_26"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_27"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_28"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_29"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_30"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_31"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_32"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_33"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_34"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_35"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_36"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_37"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_38"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_39"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_40"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_while_emptytensorlist_41"
        type: DT_VARIANT
      }
      output_arg {
        name: "less"
        type: DT_BOOL
      }
    }
    node_def {
      name: "Less"
      op: "Less"
      input: "placeholder"
      input: "less_gru_cell_strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Less"
      }
    }
    ret {
      key: "less"
      value: "Less:z:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 256
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 10
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 11
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 12
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 13
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 14
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 15
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 16
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 17
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 18
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 19
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 20
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 21
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 22
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 23
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 24
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 25
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 26
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 27
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 28
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 29
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 30
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 31
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 32
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 33
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 34
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 35
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 36
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 37
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 38
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 39
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 40
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 41
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 42
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 43
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 44
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 45
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 46
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 47
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 48
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 49
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 50
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 51
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_cond_false_778"
      input_arg {
        name: "identity_stream_2_flatten_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_stream_2_flatten_reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
      experimental_debug_info {
        original_node_names: "OptionalNone_1"
      }
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
      experimental_debug_info {
        original_node_names: "OptionalNone_2"
      }
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
      experimental_debug_info {
        original_node_names: "OptionalNone_3"
      }
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
      experimental_debug_info {
        original_node_names: "OptionalNone_4"
      }
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
      experimental_debug_info {
        original_node_names: "OptionalNone_5"
      }
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
      experimental_debug_info {
        original_node_names: "OptionalNone_6"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 256
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "gru_cell_while_body_341"
      input_arg {
        name: "gru_cell_while_loop_counter"
        type: DT_INT32
      }
      input_arg {
        name: "gru_cell_while_maximum_iterations_0"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "gru_cell_strided_slice_0"
        type: DT_INT32
      }
      input_arg {
        name: "tensorarrayv2read_tensorlistgetitem_gru_cell_tensorarrayunstack_tensorlistfromtensor_0"
        type: DT_VARIANT
      }
      input_arg {
        name: "gru_cell_readvariableop_gru_cell_gru_cell_bias_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_matmul_readvariableop_gru_cell_gru_cell_kernel_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "gru_cell_matmul_1_readvariableop_gru_cell_gru_cell_recurrent_kernel_0"
        type: DT_RESOURCE
      }
      input_arg {
        name: "tensorlistpushback_gru_cell_while_emptytensorlist"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_1_gru_cell_while_emptytensorlist_1"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_2_gru_cell_while_emptytensorlist_2"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_3_gru_cell_while_emptytensorlist_3"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_4_gru_cell_while_emptytensorlist_4"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_5_gru_cell_while_emptytensorlist_5"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_6_gru_cell_while_emptytensorlist_6"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_7_gru_cell_while_emptytensorlist_7"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_8_gru_cell_while_emptytensorlist_8"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_9_gru_cell_while_emptytensorlist_9"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_10_gru_cell_while_emptytensorlist_10"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_11_gru_cell_while_emptytensorlist_11"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_12_gru_cell_while_emptytensorlist_12"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_13_gru_cell_while_emptytensorlist_13"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_14_gru_cell_while_emptytensorlist_14"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_15_gru_cell_while_emptytensorlist_15"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_16_gru_cell_while_emptytensorlist_16"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_17_gru_cell_while_emptytensorlist_17"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_18_gru_cell_while_emptytensorlist_18"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_19_gru_cell_while_emptytensorlist_19"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_20_gru_cell_while_emptytensorlist_20"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_21_gru_cell_while_emptytensorlist_21"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_22_gru_cell_while_emptytensorlist_22"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_23_gru_cell_while_emptytensorlist_23"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_24_gru_cell_while_emptytensorlist_24"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_25_gru_cell_while_emptytensorlist_25"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_26_gru_cell_while_emptytensorlist_26"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_27_gru_cell_while_emptytensorlist_27"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_28_gru_cell_while_emptytensorlist_28"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_29_gru_cell_while_emptytensorlist_29"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_30_gru_cell_while_emptytensorlist_30"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_31_gru_cell_while_emptytensorlist_31"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_32_gru_cell_while_emptytensorlist_32"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_33_gru_cell_while_emptytensorlist_33"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_34_gru_cell_while_emptytensorlist_34"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_35_gru_cell_while_emptytensorlist_35"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_36_gru_cell_while_emptytensorlist_36"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_37_gru_cell_while_emptytensorlist_37"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_38_gru_cell_while_emptytensorlist_38"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_39_gru_cell_while_emptytensorlist_39"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_40_gru_cell_while_emptytensorlist_40"
        type: DT_VARIANT
      }
      input_arg {
        name: "tensorlistpushback_41_gru_cell_while_emptytensorlist_41"
        type: DT_VARIANT
      }
      output_arg {
        name: "add_1"
        type: DT_INT32
      }
      output_arg {
        name: "gru_cell_while_maximum_iterations"
        type: DT_INT32
      }
      output_arg {
        name: "add"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2write_tensorlistsetitem"
        type: DT_VARIANT
      }
      output_arg {
        name: "gru_cell_add_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "gru_cell_strided_slice"
        type: DT_INT32
      }
      output_arg {
        name: "tensorarrayv2read_tensorlistgetitem_gru_cell_tensorarrayunstack_tensorlistfromtensor"
        type: DT_VARIANT
      }
      output_arg {
        name: "gru_cell_readvariableop_gru_cell_gru_cell_bias"
        type: DT_RESOURCE
      }
      output_arg {
        name: "gru_cell_matmul_readvariableop_gru_cell_gru_cell_kernel"
        type: DT_RESOURCE
      }
      output_arg {
        name: "gru_cell_matmul_1_readvariableop_gru_cell_gru_cell_recurrent_kernel"
        type: DT_RESOURCE
      }
      output_arg {
        name: "tensorlistpushback"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_17"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_18"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_19"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_20"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_21"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_22"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_23"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_24"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_25"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_26"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_27"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_28"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_29"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_30"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_31"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_32"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_33"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_34"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_35"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_36"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_37"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_38"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_39"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_40"
        type: DT_VARIANT
      }
      output_arg {
        name: "tensorlistpushback_41"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem/element_shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000@\002\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem/element_shape"
      }
    }
    node_def {
      name: "TensorArrayV2Read/TensorListGetItem"
      op: "TensorListGetItem"
      input: "tensorarrayv2read_tensorlistgetitem_gru_cell_tensorarrayunstack_tensorlistfromtensor_0"
      input: "placeholder"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Read/TensorListGetItem"
      }
    }
    node_def {
      name: "gru_cell/ReadVariableOp"
      op: "ReadVariableOp"
      input: "gru_cell_readvariableop_gru_cell_gru_cell_bias_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/ReadVariableOp"
      }
    }
    node_def {
      name: "gru_cell/unstack"
      op: "Unpack"
      input: "gru_cell/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      attr {
        key: "num"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/unstack"
      }
    }
    node_def {
      name: "gru_cell/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "gru_cell_matmul_readvariableop_gru_cell_gru_cell_kernel_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "gru_cell/MatMul"
      op: "MatMul"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      input: "gru_cell/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/MatMul"
      }
    }
    node_def {
      name: "gru_cell/BiasAdd"
      op: "BiasAdd"
      input: "gru_cell/MatMul:product:0"
      input: "gru_cell/unstack:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/BiasAdd"
      }
    }
    node_def {
      name: "gru_cell/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/Const"
      }
    }
    node_def {
      name: "gru_cell/split/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/split/split_dim"
      }
    }
    node_def {
      name: "gru_cell/split"
      op: "Split"
      input: "gru_cell/split/split_dim:output:0"
      input: "gru_cell/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "num_split"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/split"
      }
    }
    node_def {
      name: "gru_cell/MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "gru_cell_matmul_1_readvariableop_gru_cell_gru_cell_recurrent_kernel_0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/MatMul_1/ReadVariableOp"
      }
    }
    node_def {
      name: "gru_cell/MatMul_1"
      op: "MatMul"
      input: "placeholder_2"
      input: "gru_cell/MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/MatMul_1"
      }
    }
    node_def {
      name: "gru_cell/BiasAdd_1"
      op: "BiasAdd"
      input: "gru_cell/MatMul_1:product:0"
      input: "gru_cell/unstack:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/BiasAdd_1"
      }
    }
    node_def {
      name: "gru_cell/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000\377\377\377\377"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/Const_1"
      }
    }
    node_def {
      name: "gru_cell/split_1/split_dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/split_1/split_dim"
      }
    }
    node_def {
      name: "gru_cell/split_1"
      op: "SplitV"
      input: "gru_cell/BiasAdd_1:output:0"
      input: "gru_cell/Const_1:output:0"
      input: "gru_cell/split_1/split_dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tlen"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "num_split"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/split_1"
      }
    }
    node_def {
      name: "gru_cell/add"
      op: "AddV2"
      input: "gru_cell/split:output:0"
      input: "gru_cell/split_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/add"
      }
    }
    node_def {
      name: "gru_cell/Sigmoid"
      op: "Sigmoid"
      input: "gru_cell/add:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/Sigmoid"
      }
    }
    node_def {
      name: "gru_cell/add_1"
      op: "AddV2"
      input: "gru_cell/split:output:1"
      input: "gru_cell/split_1:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/add_1"
      }
    }
    node_def {
      name: "gru_cell/Sigmoid_1"
      op: "Sigmoid"
      input: "gru_cell/add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/Sigmoid_1"
      }
    }
    node_def {
      name: "gru_cell/mul"
      op: "Mul"
      input: "gru_cell/Sigmoid_1:y:0"
      input: "gru_cell/split_1:output:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/mul"
      }
    }
    node_def {
      name: "gru_cell/add_2"
      op: "AddV2"
      input: "gru_cell/split:output:2"
      input: "gru_cell/mul:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/add_2"
      }
    }
    node_def {
      name: "gru_cell/Tanh"
      op: "Tanh"
      input: "gru_cell/add_2:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/Tanh"
      }
    }
    node_def {
      name: "gru_cell/mul_1"
      op: "Mul"
      input: "gru_cell/Sigmoid:y:0"
      input: "placeholder_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/mul_1"
      }
    }
    node_def {
      name: "gru_cell/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/sub/x"
      }
    }
    node_def {
      name: "gru_cell/sub"
      op: "Sub"
      input: "gru_cell/sub/x:output:0"
      input: "gru_cell/Sigmoid:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/sub"
      }
    }
    node_def {
      name: "gru_cell/mul_2"
      op: "Mul"
      input: "gru_cell/sub:z:0"
      input: "gru_cell/Tanh:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/mul_2"
      }
    }
    node_def {
      name: "gru_cell/add_3"
      op: "AddV2"
      input: "gru_cell/mul_1:z:0"
      input: "gru_cell/mul_2:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "gru_cell/add_3"
      }
    }
    node_def {
      name: "TensorArrayV2Write/TensorListSetItem"
      op: "TensorListSetItem"
      input: "placeholder_1"
      input: "placeholder"
      input: "gru_cell/add_3:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorArrayV2Write/TensorListSetItem"
      }
    }
    node_def {
      name: "add/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add/y"
      }
    }
    node_def {
      name: "add_0"
      op: "AddV2"
      input: "placeholder"
      input: "add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    node_def {
      name: "add_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "add_1/y"
      }
    }
    node_def {
      name: "add_1_0"
      op: "AddV2"
      input: "gru_cell_while_loop_counter"
      input: "add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add_1"
      }
    }
    node_def {
      name: "TensorListPushBack"
      op: "TensorListPushBack"
      input: "tensorlistpushback_gru_cell_while_emptytensorlist"
      input: "gru_cell_while_maximum_iterations_0"
      attr {
        key: "element_dtype"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack"
      }
    }
    node_def {
      name: "TensorListPushBack_1"
      op: "TensorListPushBack"
      input: "tensorlistpushback_1_gru_cell_while_emptytensorlist_1"
      input: "placeholder"
      attr {
        key: "element_dtype"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_1"
      }
    }
    node_def {
      name: "TensorListPushBack_2"
      op: "TensorListPushBack"
      input: "tensorlistpushback_2_gru_cell_while_emptytensorlist_2"
      input: "placeholder_1"
      attr {
        key: "element_dtype"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_2"
      }
    }
    node_def {
      name: "TensorListPushBack_3"
      op: "TensorListPushBack"
      input: "tensorlistpushback_3_gru_cell_while_emptytensorlist_3"
      input: "placeholder_2"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_3"
      }
    }
    node_def {
      name: "TensorListPushBack_4"
      op: "TensorListPushBack"
      input: "tensorlistpushback_4_gru_cell_while_emptytensorlist_4"
      input: "TensorArrayV2Read/TensorListGetItem/element_shape:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_4"
      }
    }
    node_def {
      name: "TensorListPushBack_5"
      op: "TensorListPushBack"
      input: "tensorlistpushback_5_gru_cell_while_emptytensorlist_5"
      input: "TensorArrayV2Read/TensorListGetItem:item:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_5"
      }
    }
    node_def {
      name: "TensorListPushBack_6"
      op: "TensorListPushBack"
      input: "tensorlistpushback_6_gru_cell_while_emptytensorlist_6"
      input: "gru_cell/ReadVariableOp:value:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_6"
      }
    }
    node_def {
      name: "TensorListPushBack_7"
      op: "TensorListPushBack"
      input: "tensorlistpushback_7_gru_cell_while_emptytensorlist_7"
      input: "gru_cell/unstack:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_7"
      }
    }
    node_def {
      name: "TensorListPushBack_8"
      op: "TensorListPushBack"
      input: "tensorlistpushback_8_gru_cell_while_emptytensorlist_8"
      input: "gru_cell/unstack:output:1"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_8"
      }
    }
    node_def {
      name: "TensorListPushBack_9"
      op: "TensorListPushBack"
      input: "tensorlistpushback_9_gru_cell_while_emptytensorlist_9"
      input: "gru_cell/MatMul/ReadVariableOp:value:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_9"
      }
    }
    node_def {
      name: "TensorListPushBack_10"
      op: "TensorListPushBack"
      input: "tensorlistpushback_10_gru_cell_while_emptytensorlist_10"
      input: "gru_cell/MatMul:product:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_10"
      }
    }
    node_def {
      name: "TensorListPushBack_11"
      op: "TensorListPushBack"
      input: "tensorlistpushback_11_gru_cell_while_emptytensorlist_11"
      input: "gru_cell/BiasAdd:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_11"
      }
    }
    node_def {
      name: "TensorListPushBack_12"
      op: "TensorListPushBack"
      input: "tensorlistpushback_12_gru_cell_while_emptytensorlist_12"
      input: "gru_cell/Const:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_12"
      }
    }
    node_def {
      name: "TensorListPushBack_13"
      op: "TensorListPushBack"
      input: "tensorlistpushback_13_gru_cell_while_emptytensorlist_13"
      input: "gru_cell/split/split_dim:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_13"
      }
    }
    node_def {
      name: "TensorListPushBack_14"
      op: "TensorListPushBack"
      input: "tensorlistpushback_14_gru_cell_while_emptytensorlist_14"
      input: "gru_cell/split:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_14"
      }
    }
    node_def {
      name: "TensorListPushBack_15"
      op: "TensorListPushBack"
      input: "tensorlistpushback_15_gru_cell_while_emptytensorlist_15"
      input: "gru_cell/split:output:1"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_15"
      }
    }
    node_def {
      name: "TensorListPushBack_16"
      op: "TensorListPushBack"
      input: "tensorlistpushback_16_gru_cell_while_emptytensorlist_16"
      input: "gru_cell/split:output:2"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_16"
      }
    }
    node_def {
      name: "TensorListPushBack_17"
      op: "TensorListPushBack"
      input: "tensorlistpushback_17_gru_cell_while_emptytensorlist_17"
      input: "gru_cell/MatMul_1/ReadVariableOp:value:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_17"
      }
    }
    node_def {
      name: "TensorListPushBack_18"
      op: "TensorListPushBack"
      input: "tensorlistpushback_18_gru_cell_while_emptytensorlist_18"
      input: "gru_cell/MatMul_1:product:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_18"
      }
    }
    node_def {
      name: "TensorListPushBack_19"
      op: "TensorListPushBack"
      input: "tensorlistpushback_19_gru_cell_while_emptytensorlist_19"
      input: "gru_cell/BiasAdd_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_19"
      }
    }
    node_def {
      name: "TensorListPushBack_20"
      op: "TensorListPushBack"
      input: "tensorlistpushback_20_gru_cell_while_emptytensorlist_20"
      input: "gru_cell/Const_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_20"
      }
    }
    node_def {
      name: "TensorListPushBack_21"
      op: "TensorListPushBack"
      input: "tensorlistpushback_21_gru_cell_while_emptytensorlist_21"
      input: "gru_cell/split_1/split_dim:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_21"
      }
    }
    node_def {
      name: "TensorListPushBack_22"
      op: "TensorListPushBack"
      input: "tensorlistpushback_22_gru_cell_while_emptytensorlist_22"
      input: "gru_cell/split_1:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_22"
      }
    }
    node_def {
      name: "TensorListPushBack_23"
      op: "TensorListPushBack"
      input: "tensorlistpushback_23_gru_cell_while_emptytensorlist_23"
      input: "gru_cell/split_1:output:1"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_23"
      }
    }
    node_def {
      name: "TensorListPushBack_24"
      op: "TensorListPushBack"
      input: "tensorlistpushback_24_gru_cell_while_emptytensorlist_24"
      input: "gru_cell/split_1:output:2"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_24"
      }
    }
    node_def {
      name: "TensorListPushBack_25"
      op: "TensorListPushBack"
      input: "tensorlistpushback_25_gru_cell_while_emptytensorlist_25"
      input: "gru_cell/add:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_25"
      }
    }
    node_def {
      name: "TensorListPushBack_26"
      op: "TensorListPushBack"
      input: "tensorlistpushback_26_gru_cell_while_emptytensorlist_26"
      input: "gru_cell/Sigmoid:y:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_26"
      }
    }
    node_def {
      name: "TensorListPushBack_27"
      op: "TensorListPushBack"
      input: "tensorlistpushback_27_gru_cell_while_emptytensorlist_27"
      input: "gru_cell/add_1:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_27"
      }
    }
    node_def {
      name: "TensorListPushBack_28"
      op: "TensorListPushBack"
      input: "tensorlistpushback_28_gru_cell_while_emptytensorlist_28"
      input: "gru_cell/Sigmoid_1:y:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_28"
      }
    }
    node_def {
      name: "TensorListPushBack_29"
      op: "TensorListPushBack"
      input: "tensorlistpushback_29_gru_cell_while_emptytensorlist_29"
      input: "gru_cell/mul:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_29"
      }
    }
    node_def {
      name: "TensorListPushBack_30"
      op: "TensorListPushBack"
      input: "tensorlistpushback_30_gru_cell_while_emptytensorlist_30"
      input: "gru_cell/add_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_30"
      }
    }
    node_def {
      name: "TensorListPushBack_31"
      op: "TensorListPushBack"
      input: "tensorlistpushback_31_gru_cell_while_emptytensorlist_31"
      input: "gru_cell/Tanh:y:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_31"
      }
    }
    node_def {
      name: "TensorListPushBack_32"
      op: "TensorListPushBack"
      input: "tensorlistpushback_32_gru_cell_while_emptytensorlist_32"
      input: "gru_cell/mul_1:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_32"
      }
    }
    node_def {
      name: "TensorListPushBack_33"
      op: "TensorListPushBack"
      input: "tensorlistpushback_33_gru_cell_while_emptytensorlist_33"
      input: "gru_cell/sub/x:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_33"
      }
    }
    node_def {
      name: "TensorListPushBack_34"
      op: "TensorListPushBack"
      input: "tensorlistpushback_34_gru_cell_while_emptytensorlist_34"
      input: "gru_cell/sub:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_34"
      }
    }
    node_def {
      name: "TensorListPushBack_35"
      op: "TensorListPushBack"
      input: "tensorlistpushback_35_gru_cell_while_emptytensorlist_35"
      input: "gru_cell/mul_2:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_35"
      }
    }
    node_def {
      name: "TensorListPushBack_36"
      op: "TensorListPushBack"
      input: "tensorlistpushback_36_gru_cell_while_emptytensorlist_36"
      input: "gru_cell/add_3:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_36"
      }
    }
    node_def {
      name: "TensorListPushBack_37"
      op: "TensorListPushBack"
      input: "tensorlistpushback_37_gru_cell_while_emptytensorlist_37"
      input: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_VARIANT
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_37"
      }
    }
    node_def {
      name: "TensorListPushBack_38"
      op: "TensorListPushBack"
      input: "tensorlistpushback_38_gru_cell_while_emptytensorlist_38"
      input: "add/y:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_38"
      }
    }
    node_def {
      name: "TensorListPushBack_39"
      op: "TensorListPushBack"
      input: "tensorlistpushback_39_gru_cell_while_emptytensorlist_39"
      input: "add_0:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_39"
      }
    }
    node_def {
      name: "TensorListPushBack_40"
      op: "TensorListPushBack"
      input: "tensorlistpushback_40_gru_cell_while_emptytensorlist_40"
      input: "add_1/y:output:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_40"
      }
    }
    node_def {
      name: "TensorListPushBack_41"
      op: "TensorListPushBack"
      input: "tensorlistpushback_41_gru_cell_while_emptytensorlist_41"
      input: "add_1_0:z:0"
      attr {
        key: "element_dtype"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "TensorListPushBack_41"
      }
    }
    ret {
      key: "add"
      value: "add_0:z:0"
    }
    ret {
      key: "add_1"
      value: "add_1_0:z:0"
    }
    ret {
      key: "gru_cell_add_3"
      value: "gru_cell/add_3:z:0"
    }
    ret {
      key: "gru_cell_matmul_1_readvariableop_gru_cell_gru_cell_recurrent_kernel"
      value: "gru_cell_matmul_1_readvariableop_gru_cell_gru_cell_recurrent_kernel_0"
    }
    ret {
      key: "gru_cell_matmul_readvariableop_gru_cell_gru_cell_kernel"
      value: "gru_cell_matmul_readvariableop_gru_cell_gru_cell_kernel_0"
    }
    ret {
      key: "gru_cell_readvariableop_gru_cell_gru_cell_bias"
      value: "gru_cell_readvariableop_gru_cell_gru_cell_bias_0"
    }
    ret {
      key: "gru_cell_strided_slice"
      value: "gru_cell_strided_slice_0"
    }
    ret {
      key: "gru_cell_while_maximum_iterations"
      value: "gru_cell_while_maximum_iterations_0"
    }
    ret {
      key: "tensorarrayv2read_tensorlistgetitem_gru_cell_tensorarrayunstack_tensorlistfromtensor"
      value: "tensorarrayv2read_tensorlistgetitem_gru_cell_tensorarrayunstack_tensorlistfromtensor_0"
    }
    ret {
      key: "tensorarrayv2write_tensorlistsetitem"
      value: "TensorArrayV2Write/TensorListSetItem:output_handle:0"
    }
    ret {
      key: "tensorlistpushback"
      value: "TensorListPushBack:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_1"
      value: "TensorListPushBack_1:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_10"
      value: "TensorListPushBack_10:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_11"
      value: "TensorListPushBack_11:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_12"
      value: "TensorListPushBack_12:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_13"
      value: "TensorListPushBack_13:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_14"
      value: "TensorListPushBack_14:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_15"
      value: "TensorListPushBack_15:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_16"
      value: "TensorListPushBack_16:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_17"
      value: "TensorListPushBack_17:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_18"
      value: "TensorListPushBack_18:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_19"
      value: "TensorListPushBack_19:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_2"
      value: "TensorListPushBack_2:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_20"
      value: "TensorListPushBack_20:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_21"
      value: "TensorListPushBack_21:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_22"
      value: "TensorListPushBack_22:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_23"
      value: "TensorListPushBack_23:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_24"
      value: "TensorListPushBack_24:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_25"
      value: "TensorListPushBack_25:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_26"
      value: "TensorListPushBack_26:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_27"
      value: "TensorListPushBack_27:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_28"
      value: "TensorListPushBack_28:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_29"
      value: "TensorListPushBack_29:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_3"
      value: "TensorListPushBack_3:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_30"
      value: "TensorListPushBack_30:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_31"
      value: "TensorListPushBack_31:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_32"
      value: "TensorListPushBack_32:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_33"
      value: "TensorListPushBack_33:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_34"
      value: "TensorListPushBack_34:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_35"
      value: "TensorListPushBack_35:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_36"
      value: "TensorListPushBack_36:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_37"
      value: "TensorListPushBack_37:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_38"
      value: "TensorListPushBack_38:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_39"
      value: "TensorListPushBack_39:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_4"
      value: "TensorListPushBack_4:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_40"
      value: "TensorListPushBack_40:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_41"
      value: "TensorListPushBack_41:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_5"
      value: "TensorListPushBack_5:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_6"
      value: "TensorListPushBack_6:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_7"
      value: "TensorListPushBack_7:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_8"
      value: "TensorListPushBack_8:output_handle:0"
    }
    ret {
      key: "tensorlistpushback_9"
      value: "TensorListPushBack_9:output_handle:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 256
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 10
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 11
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 12
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 13
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 14
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 15
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 16
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 17
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 18
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 19
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 20
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 21
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 22
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 23
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 24
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 25
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 26
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 27
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 28
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 29
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 30
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 31
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 32
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 33
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 34
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 35
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 36
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 37
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 38
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 39
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 40
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 41
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 42
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 43
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 44
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 45
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 46
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 47
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 48
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 49
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 50
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 51
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dropout_cond_true_777"
      input_arg {
        name: "dropout_mul_stream_2_flatten_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_mul_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Const"
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_stream_2_flatten_reshape"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Mul"
      }
    }
    node_def {
      name: "dropout/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000\000\001\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Shape"
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/RandomUniform"
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/GreaterEqual/y"
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/GreaterEqual"
      }
    }
    node_def {
      name: "dropout/Cast"
      op: "Cast"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Cast"
      }
    }
    node_def {
      name: "dropout/Mul_1"
      op: "Mul"
      input: "dropout/Mul:z:0"
      input: "dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Mul_1"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "dropout/Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_5"
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "dropout/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_6"
      }
    }
    ret {
      key: "dropout_mul_1"
      value: "dropout/Mul_1:z:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 256
                }
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 440
  min_consumer: 12
}
